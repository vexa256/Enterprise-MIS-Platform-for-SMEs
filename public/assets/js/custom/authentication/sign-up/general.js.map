{"version":3,"sources":["webpack://metronic/../demo5/src/js/custom/authentication/sign-up/general.js"],"names":["form","submitButton","validator","passwordMeter","validatePassword","KTSignupGeneral","getScore","init","document","querySelector","KTPasswordMeter","getInstance","FormValidation","formValidation","fields","validators","notEmpty","message","emailAddress","callback","input","value","length","identical","compare","plugins","trigger","Trigger","event","password","bootstrap","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","addEventListener","e","preventDefault","revalidateField","validate","then","status","setAttribute","disabled","setTimeout","removeAttribute","Swal","fire","text","icon","buttonsStyling","confirmButtonText","customClass","confirmButton","result","isConfirmed","reset","this","updateFieldStatus","KTUtil","onDOMContentLoaded"],"mappings":"mBAGA,IAEQA,EACAC,EACAC,EACAC,EAmJAC,EAxJJC,GAwJID,EAAmB,WACnB,OAAsC,MAA7BD,EAAcG,YAIpB,CAEHC,KAAM,WAEFP,EAAOQ,SAASC,cAAc,oBAC9BR,EAAeO,SAASC,cAAc,sBACtCN,EAAgBO,gBAAgBC,YAAYX,EAAKS,cAAc,oCAzJnEP,EAAYU,eAAeC,eAChCb,EACA,CACCc,OAAQ,CACP,aAAc,CACbC,WAAY,CACXC,SAAU,CACTC,QAAS,4BAIG,YAAa,CAC3BF,WAAY,CACXC,SAAU,CACTC,QAAS,2BAIZ,MAAS,CACUF,WAAY,CAC7BC,SAAU,CACTC,QAAS,6BAEWC,aAAc,CAClCD,QAAS,4CAIG,SAAY,CACRF,WAAY,CACRC,SAAU,CACNC,QAAS,4BAEbE,SAAU,CACNF,QAAS,8BACTE,SAAU,SAASC,GACf,GAAIA,EAAMC,MAAMC,OAAS,EACrB,OAAOlB,QAM3B,mBAAoB,CAChBW,WAAY,CACRC,SAAU,CACNC,QAAS,yCAEbM,UAAW,CACPC,QAAS,WACL,OAAOxB,EAAKS,cAAc,qBAAqBY,OAEnDJ,QAAS,mDAIrB,IAAO,CACHF,WAAY,CACRC,SAAU,CACNC,QAAS,+CAKrCQ,QAAS,CACRC,QAAS,IAAId,eAAea,QAAQE,QAAQ,CACzBC,MAAO,CACHC,UAAU,KAGjCC,UAAW,IAAIlB,eAAea,QAAQM,WAAW,CAC9BC,YAAa,UACbC,gBAAiB,GACjBC,cAAe,QAO/BjC,EAAakC,iBAAiB,SAAS,SAAUC,GAC7CA,EAAEC,iBAEFnC,EAAUoC,gBAAgB,YAE1BpC,EAAUqC,WAAWC,MAAK,SAASC,GACvB,SAAVA,GAEMxC,EAAayC,aAAa,oBAAqB,MAG/CzC,EAAa0C,UAAW,EAGxBC,YAAW,WAEP3C,EAAa4C,gBAAgB,qBAG7B5C,EAAa0C,UAAW,EAGxBG,KAAKC,KAAK,CACNC,KAAM,6CACNC,KAAM,UACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,qBAEpBb,MAAK,SAAUc,GACVA,EAAOC,cACPvD,EAAKwD,QACLrD,EAAcqD,cAIvB,OAGHV,KAAKC,KAAK,CACNC,KAAM,sEACNC,KAAM,QACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,2BAQnCrD,EAAKS,cAAc,0BAA0B0B,iBAAiB,SAAS,WAC/DsB,KAAKpC,MAAMC,OAAS,GACpBpB,EAAUwD,kBAAkB,WAAY,sBAyBxDC,OAAOC,oBAAmB,WACtBvD,EAAgBE,W","file":"js/custom/authentication/sign-up/general.js","sourcesContent":["\"use strict\";\r\n\r\n// Class definition\r\nvar KTSignupGeneral = function() {\r\n    // Elements\r\n    var form;\r\n    var submitButton;\r\n    var validator;\r\n    var passwordMeter;\r\n\r\n    // Handle form\r\n    var handleForm  = function(e) {\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        validator = FormValidation.formValidation(\r\n\t\t\tform,\r\n\t\t\t{\r\n\t\t\t\tfields: {\r\n\t\t\t\t\t'first-name': {\r\n\t\t\t\t\t\tvalidators: {\r\n\t\t\t\t\t\t\tnotEmpty: {\r\n\t\t\t\t\t\t\t\tmessage: 'First Name is required'\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n                    },\r\n                    'last-name': {\r\n\t\t\t\t\t\tvalidators: {\r\n\t\t\t\t\t\t\tnotEmpty: {\r\n\t\t\t\t\t\t\t\tmessage: 'Last Name is required'\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'email': {\r\n                        validators: {\r\n\t\t\t\t\t\t\tnotEmpty: {\r\n\t\t\t\t\t\t\t\tmessage: 'Email address is required'\r\n\t\t\t\t\t\t\t},\r\n                            emailAddress: {\r\n\t\t\t\t\t\t\t\tmessage: 'The value is not a valid email address'\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n                    'password': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'The password is required'\r\n                            },\r\n                            callback: {\r\n                                message: 'Please enter valid password',\r\n                                callback: function(input) {\r\n                                    if (input.value.length > 0) {\r\n                                        return validatePassword();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    'confirm-password': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'The password confirmation is required'\r\n                            },\r\n                            identical: {\r\n                                compare: function() {\r\n                                    return form.querySelector('[name=\"password\"]').value;\r\n                                },\r\n                                message: 'The password and its confirm are not the same'\r\n                            }\r\n                        }\r\n                    },\r\n                    'toc': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'You must accept the terms and conditions'\r\n                            }\r\n                        }\r\n                    }\r\n\t\t\t\t},\r\n\t\t\t\tplugins: {\r\n\t\t\t\t\ttrigger: new FormValidation.plugins.Trigger({\r\n                        event: {\r\n                            password: false\r\n                        }  \r\n                    }),\r\n\t\t\t\t\tbootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: ''\r\n                    })\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n        // Handle form submit\r\n        submitButton.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            validator.revalidateField('password');\r\n\r\n            validator.validate().then(function(status) {\r\n\t\t        if (status == 'Valid') {\r\n                    // Show loading indication\r\n                    submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                    // Disable button to avoid multiple click \r\n                    submitButton.disabled = true;\r\n\r\n                    // Simulate ajax request\r\n                    setTimeout(function() {\r\n                        // Hide loading indication\r\n                        submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                        // Enable button\r\n                        submitButton.disabled = false;\r\n\r\n                        // Show message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        Swal.fire({\r\n                            text: \"You have successfully reset your password!\",\r\n                            icon: \"success\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: \"Ok, got it!\",\r\n                            customClass: {\r\n                                confirmButton: \"btn btn-primary\"\r\n                            }\r\n                        }).then(function (result) {\r\n                            if (result.isConfirmed) { \r\n                                form.reset();  // reset form                    \r\n                                passwordMeter.reset();  // reset password meter\r\n                                //form.submit();\r\n                            }\r\n                        });\r\n                    }, 1500);   \t\t\t\t\t\t\r\n                } else {\r\n                    // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                    Swal.fire({\r\n                        text: \"Sorry, looks like there are some errors detected, please try again.\",\r\n                        icon: \"error\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn btn-primary\"\r\n                        }\r\n                    });\r\n                }\r\n\t\t    });\r\n        });\r\n\r\n        // Handle password input\r\n        form.querySelector('input[name=\"password\"]').addEventListener('input', function() {\r\n            if (this.value.length > 0) {\r\n                validator.updateFieldStatus('password', 'NotValidated');\r\n            }\r\n        });\r\n    }\r\n\r\n    // Password input validation\r\n    var validatePassword = function() {\r\n        return  (passwordMeter.getScore() === 100);\r\n    }\r\n\r\n    // Public functions\r\n    return {\r\n        // Initialization\r\n        init: function() {\r\n            // Elements\r\n            form = document.querySelector('#kt_sign_up_form');\r\n            submitButton = document.querySelector('#kt_sign_up_submit');\r\n            passwordMeter = KTPasswordMeter.getInstance(form.querySelector('[data-kt-password-meter=\"true\"]'));\r\n\r\n            handleForm ();\r\n        }\r\n    };\r\n}();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function() {\r\n    KTSignupGeneral.init();\r\n});\r\n"],"sourceRoot":""}