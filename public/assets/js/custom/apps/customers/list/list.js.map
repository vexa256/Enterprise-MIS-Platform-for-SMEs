{"version":3,"sources":["webpack://metronic/../demo5/src/js/custom/apps/customers/list/list.js"],"names":["KTCustomersList","datatable","filterMonth","filterPayment","table","handleDeleteRows","querySelectorAll","forEach","d","addEventListener","e","preventDefault","parent","target","closest","customerName","innerText","Swal","fire","text","icon","showCancelButton","buttonsStyling","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","then","result","value","row","$","remove","draw","dismiss","initToggleToolbar","checkboxes","deleteSelected","document","querySelector","c","setTimeout","toggleToolbars","checked","toolbarBase","toolbarSelected","selectedCount","allCheckboxes","checkedState","count","innerHTML","classList","add","init","dateRow","realDate","moment","format","setAttribute","DataTable","orderable","targets","on","search","monthValue","val","paymentValue","r","filterString","trigger","KTUtil","onDOMContentLoaded"],"mappings":"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","file":"js/custom/apps/customers/list/list.js","sourcesContent":["\"use strict\";\r\n\r\n// Class definition\r\nvar KTCustomersList = function () {\r\n    // Define shared variables\r\n    var datatable;\r\n    var filterMonth;\r\n    var filterPayment;\r\n    var table\r\n\r\n    // Private functions\r\n    var initCustomerList = function () {\r\n        // Set date data order\r\n        const tableRows = table.querySelectorAll('tbody tr');\r\n\r\n        tableRows.forEach(row => {\r\n            const dateRow = row.querySelectorAll('td');\r\n            const realDate = moment(dateRow[5].innerHTML, \"DD MMM YYYY, LT\").format(); // select date from 5th column in table\r\n            dateRow[5].setAttribute('data-order', realDate);\r\n        });\r\n\r\n        // Init datatable --- more info on datatables: https://datatables.net/manual/\r\n        datatable = $(table).DataTable({\r\n            \"info\": false,\r\n            'order': [],\r\n            'columnDefs': [\r\n                { orderable: false, targets: 0 }, // Disable ordering on column 0 (checkbox)\r\n                { orderable: false, targets: 6 }, // Disable ordering on column 6 (actions)\r\n            ]\r\n        });\r\n\r\n        // Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw\r\n        datatable.on('draw', function () {\r\n            initToggleToolbar();\r\n            handleDeleteRows();\r\n            toggleToolbars();\r\n        });\r\n    }\r\n\r\n    // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\r\n    var handleSearchDatatable = () => {\r\n        const filterSearch = document.querySelector('[data-kt-customer-table-filter=\"search\"]');\r\n        filterSearch.addEventListener('keyup', function (e) {\r\n            datatable.search(e.target.value).draw();\r\n        });\r\n    }\r\n\r\n    // Filter Datatable\r\n    var handleFilterDatatable = () => {\r\n        // Select filter options\r\n        filterMonth = $('[data-kt-customer-table-filter=\"month\"]');\r\n        filterPayment = document.querySelectorAll('[data-kt-customer-table-filter=\"payment_type\"] [name=\"payment_type\"]');\r\n        const filterButton = document.querySelector('[data-kt-customer-table-filter=\"filter\"]');\r\n\r\n        // Filter datatable on submit\r\n        filterButton.addEventListener('click', function () {\r\n            // Get filter values\r\n            const monthValue = filterMonth.val();\r\n            let paymentValue = '';\r\n\r\n            // Get payment value\r\n            filterPayment.forEach(r => {\r\n                if (r.checked) {\r\n                    paymentValue = r.value;\r\n                }\r\n\r\n                // Reset payment value if \"All\" is selected\r\n                if (paymentValue === 'all') {\r\n                    paymentValue = '';\r\n                }\r\n            });\r\n\r\n            // Build filter string from filter options\r\n            const filterString = monthValue + ' ' + paymentValue;\r\n\r\n            // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()\r\n            datatable.search(filterString).draw();\r\n        });\r\n    }\r\n\r\n    // Delete customer\r\n    var handleDeleteRows = () => {\r\n        // Select all delete buttons\r\n        const deleteButtons = table.querySelectorAll('[data-kt-customer-table-filter=\"delete_row\"]');\r\n\r\n        deleteButtons.forEach(d => {\r\n            // Delete button on click\r\n            d.addEventListener('click', function (e) {\r\n                e.preventDefault();\r\n\r\n                // Select parent row\r\n                const parent = e.target.closest('tr');\r\n\r\n                // Get customer name\r\n                const customerName = parent.querySelectorAll('td')[1].innerText;\r\n\r\n                // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\r\n                Swal.fire({\r\n                    text: \"Are you sure you want to delete \" + customerName + \"?\",\r\n                    icon: \"warning\",\r\n                    showCancelButton: true,\r\n                    buttonsStyling: false,\r\n                    confirmButtonText: \"Yes, delete!\",\r\n                    cancelButtonText: \"No, cancel\",\r\n                    customClass: {\r\n                        confirmButton: \"btn fw-bold btn-danger\",\r\n                        cancelButton: \"btn fw-bold btn-active-light-primary\"\r\n                    }\r\n                }).then(function (result) {\r\n                    if (result.value) {\r\n                        Swal.fire({\r\n                            text: \"You have deleted \" + customerName + \"!.\",\r\n                            icon: \"success\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: \"Ok, got it!\",\r\n                            customClass: {\r\n                                confirmButton: \"btn fw-bold btn-primary\",\r\n                            }\r\n                        }).then(function () {\r\n                            // Remove current row\r\n                            datatable.row($(parent)).remove().draw();\r\n                        });\r\n                    } else if (result.dismiss === 'cancel') {\r\n                        Swal.fire({\r\n                            text: customerName + \" was not deleted.\",\r\n                            icon: \"error\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: \"Ok, got it!\",\r\n                            customClass: {\r\n                                confirmButton: \"btn fw-bold btn-primary\",\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            })\r\n        });\r\n    }\r\n\r\n    // Reset Filter\r\n    var handleResetForm = () => {\r\n        // Select reset button\r\n        const resetButton = document.querySelector('[data-kt-customer-table-filter=\"reset\"]');\r\n\r\n        // Reset datatable\r\n        resetButton.addEventListener('click', function () {\r\n            // Reset month\r\n            filterMonth.val(null).trigger('change');\r\n\r\n            // Reset payment type\r\n            filterPayment[0].checked = true;\r\n\r\n            // Reset datatable --- official docs reference: https://datatables.net/reference/api/search()\r\n            datatable.search('').draw();\r\n        });\r\n    }\r\n\r\n    // Init toggle toolbar\r\n    var initToggleToolbar = () => {\r\n        // Toggle selected action toolbar\r\n        // Select all checkboxes\r\n        const checkboxes = table.querySelectorAll('[type=\"checkbox\"]');\r\n\r\n        // Select elements\r\n        const deleteSelected = document.querySelector('[data-kt-customer-table-select=\"delete_selected\"]');\r\n\r\n        // Toggle delete selected toolbar\r\n        checkboxes.forEach(c => {\r\n            // Checkbox on click event\r\n            c.addEventListener('click', function () {\r\n                setTimeout(function () {\r\n                    toggleToolbars();\r\n                }, 50);\r\n            });\r\n        });\r\n\r\n        // Deleted selected rows\r\n        deleteSelected.addEventListener('click', function () {\r\n            // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\r\n            Swal.fire({\r\n                text: \"Are you sure you want to delete selected customers?\",\r\n                icon: \"warning\",\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: \"Yes, delete!\",\r\n                cancelButtonText: \"No, cancel\",\r\n                customClass: {\r\n                    confirmButton: \"btn fw-bold btn-danger\",\r\n                    cancelButton: \"btn fw-bold btn-active-light-primary\"\r\n                }\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    Swal.fire({\r\n                        text: \"You have deleted all selected customers!.\",\r\n                        icon: \"success\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn fw-bold btn-primary\",\r\n                        }\r\n                    }).then(function () {\r\n                        // Remove all selected customers\r\n                        checkboxes.forEach(c => {\r\n                            if (c.checked) {\r\n                                datatable.row($(c.closest('tbody tr'))).remove().draw();\r\n                            }\r\n                        });\r\n\r\n                        // Remove header checked box\r\n                        const headerCheckbox = table.querySelectorAll('[type=\"checkbox\"]')[0];\r\n                        headerCheckbox.checked = false;\r\n                    });\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: \"Selected customers was not deleted.\",\r\n                        icon: \"error\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn fw-bold btn-primary\",\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Toggle toolbars\r\n    const toggleToolbars = () => {\r\n        // Define variables\r\n        const toolbarBase = document.querySelector('[data-kt-customer-table-toolbar=\"base\"]');\r\n        const toolbarSelected = document.querySelector('[data-kt-customer-table-toolbar=\"selected\"]');\r\n        const selectedCount = document.querySelector('[data-kt-customer-table-select=\"selected_count\"]');\r\n\r\n        // Select refreshed checkbox DOM elements \r\n        const allCheckboxes = table.querySelectorAll('tbody [type=\"checkbox\"]');\r\n\r\n        // Detect checkboxes state & count\r\n        let checkedState = false;\r\n        let count = 0;\r\n\r\n        // Count checked boxes\r\n        allCheckboxes.forEach(c => {\r\n            if (c.checked) {\r\n                checkedState = true;\r\n                count++;\r\n            }\r\n        });\r\n\r\n        // Toggle toolbars\r\n        if (checkedState) {\r\n            selectedCount.innerHTML = count;\r\n            toolbarBase.classList.add('d-none');\r\n            toolbarSelected.classList.remove('d-none');\r\n        } else {\r\n            toolbarBase.classList.remove('d-none');\r\n            toolbarSelected.classList.add('d-none');\r\n        }\r\n    }\r\n\r\n    // Public methods\r\n    return {\r\n        init: function () {\r\n            table = document.querySelector('#kt_customers_table');\r\n            \r\n            if (!table) {\r\n                return;\r\n            }\r\n\r\n            initCustomerList();\r\n            initToggleToolbar();\r\n            handleSearchDatatable();\r\n            handleFilterDatatable();\r\n            handleDeleteRows();\r\n            handleResetForm();\r\n        }\r\n    }\r\n}();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTCustomersList.init();\r\n});"],"sourceRoot":""}