{"version":3,"sources":["webpack://metronic/../demo5/src/js/custom/apps/customers/view/adjust-balance.js"],"names":["element","submitButton","cancelButton","closeButton","validator","maskInput","newBalance","form","modal","KTModalAdjustBalance","init","document","querySelector","bootstrap","Modal","Inputmask","mask","currentBalance","getElementById","maskValue","currentValue","parseFloat","innerHTML","replace","addEventListener","e","target","value","isNaN","toFixed","handleBalanceCalculator","FormValidation","formValidation","fields","validators","notEmpty","message","plugins","trigger","Trigger","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","$","on","revalidateField","preventDefault","validate","then","status","console","log","setAttribute","disabled","setTimeout","removeAttribute","Swal","fire","text","icon","buttonsStyling","confirmButtonText","customClass","confirmButton","result","isConfirmed","hide","reset","showCancelButton","cancelButtonText","dismiss","KTUtil","onDOMContentLoaded"],"mappings":"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","file":"js/custom/apps/customers/view/adjust-balance.js","sourcesContent":["\"use strict\";\r\n\r\n// Class definition\r\nvar KTModalAdjustBalance = function () {\r\n    var element;\r\n    var submitButton;\r\n    var cancelButton;\r\n    var closeButton;\r\n    var validator;\r\n    var maskInput;\r\n    var newBalance;\r\n    var form;\r\n    var modal;\r\n\r\n    // Init form inputs\r\n    var initForm = function () {\r\n        // Init inputmask plugin --- For more info please refer to the official documentation here: https://github.com/RobinHerbots/Inputmask\r\n        Inputmask(\"US$ 9,999,999.99\", {\r\n            \"numericInput\": true\r\n        }).mask(\"#kt_modal_inputmask\");\r\n    }\r\n\r\n    var handleBalanceCalculator = function () {\r\n        // Select elements\r\n        const currentBalance = element.querySelector('[kt-modal-adjust-balance=\"current_balance\"]');\r\n        newBalance = element.querySelector('[kt-modal-adjust-balance=\"new_balance\"]');\r\n        maskInput = document.getElementById('kt_modal_inputmask');\r\n\r\n        // Get current balance value\r\n        let currentValue = parseFloat(currentBalance.innerHTML.replace(/[^0-9.]/g, '').replace(',', ''));\r\n\r\n        // On change event for inputmask\r\n        let maskValue;\r\n        maskInput.addEventListener('focusout', function (e) {\r\n            // Get inputmask value on change\r\n            maskValue = parseFloat(e.target.value.replace(/[^0-9.]/g, '').replace(',', ''));\r\n\r\n            // Set mask value as 0 when NaN detected\r\n            if(isNaN(maskValue)){\r\n                maskValue = 0;\r\n            }\r\n\r\n            // Calculate & set new balance value\r\n            newBalance.innerHTML = 'US$ ' + (maskValue + currentValue).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n        });\r\n    }\r\n\r\n    // Handle form validation and submittion\r\n    var handleForm = function () {\r\n        // Stepper custom navigation\r\n\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        validator = FormValidation.formValidation(\r\n            form,\r\n            {\r\n                fields: {\r\n                    'adjustment': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Adjustment type is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'amount': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Amount is required'\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: ''\r\n                    })\r\n                }\r\n            }\r\n        );\r\n\r\n        // Revalidate country field. For more info, plase visit the official plugin site: https://select2.org/\r\n        $(form.querySelector('[name=\"adjustment\"]')).on('change', function () {\r\n            // Revalidate the field when an option is chosen\r\n            validator.revalidateField('adjustment');\r\n        });\r\n\r\n        // Action buttons\r\n        submitButton.addEventListener('click', function (e) {\r\n            // Prevent default button action\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    console.log('validated!');\r\n\r\n                    if (status == 'Valid') {\r\n                        // Show loading indication\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable submit button whilst loading\r\n                        submitButton.disabled = true;\r\n\r\n                        // Simulate form submission\r\n                        setTimeout(function () {\r\n                            // Simulate form submission\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            // Show popup confirmation \r\n                            Swal.fire({\r\n                                text: \"Form has been successfully submitted!\",\r\n                                icon: \"success\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            }).then(function (result) {\r\n                                if (result.isConfirmed) {\r\n                                    modal.hide();\r\n\r\n                                    // Enable submit button after loading\r\n                                    submitButton.disabled = false;\r\n\r\n                                    // Reset form for demo purposes only\r\n                                    form.reset();\r\n                                    newBalance.innerHTML = \"--\";\r\n                                }\r\n                            });\r\n\r\n                            //form.submit(); // Submit form\r\n                        }, 2000);\r\n                    } else {\r\n                        // Show popup warning \r\n                        Swal.fire({\r\n                            text: \"Sorry, looks like there are some errors detected, please try again.\",\r\n                            icon: \"error\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: \"Ok, got it!\",\r\n                            customClass: {\r\n                                confirmButton: \"btn btn-primary\"\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        cancelButton.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            Swal.fire({\r\n                text: \"Are you sure you would like to cancel?\",\r\n                icon: \"warning\",\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: \"Yes, cancel it!\",\r\n                cancelButtonText: \"No, return\",\r\n                customClass: {\r\n                    confirmButton: \"btn btn-primary\",\r\n                    cancelButton: \"btn btn-active-light\"\r\n                }\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    form.reset(); // Reset form\t\r\n                    modal.hide(); // Hide modal\t\t\t\t\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: \"Your form has not been cancelled!.\",\r\n                        icon: \"error\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn btn-primary\",\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        closeButton.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            Swal.fire({\r\n                text: \"Are you sure you would like to cancel?\",\r\n                icon: \"warning\",\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: \"Yes, cancel it!\",\r\n                cancelButtonText: \"No, return\",\r\n                customClass: {\r\n                    confirmButton: \"btn btn-primary\",\r\n                    cancelButton: \"btn btn-active-light\"\r\n                }\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    form.reset(); // Reset form\t\r\n                    modal.hide(); // Hide modal\t\t\t\t\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: \"Your form has not been cancelled!.\",\r\n                        icon: \"error\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn btn-primary\",\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    \r\n    return {\r\n        // Public functions\r\n        init: function () {\r\n            // Elements\r\n            element = document.querySelector('#kt_modal_adjust_balance');\r\n            modal = new bootstrap.Modal(element);\r\n\r\n            form = element.querySelector('#kt_modal_adjust_balance_form');\r\n            submitButton = form.querySelector('#kt_modal_adjust_balance_submit');\r\n            cancelButton = form.querySelector('#kt_modal_adjust_balance_cancel');\r\n            closeButton = element.querySelector('#kt_modal_adjust_balance_close');\r\n\r\n            initForm();\r\n            handleBalanceCalculator();\r\n            handleForm();\r\n        }\r\n    };\r\n}();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTModalAdjustBalance.init();\r\n});"],"sourceRoot":""}