{"version":3,"sources":["webpack://metronic/../demo5/src/js/custom/apps/user-management/users/list/export-users.js"],"names":["KTModalExportUsers","element","document","getElementById","form","querySelector","modal","bootstrap","Modal","init","validator","FormValidation","formValidation","fields","validators","notEmpty","message","plugins","trigger","Trigger","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","submitButton","addEventListener","e","preventDefault","validate","then","status","console","log","setAttribute","disabled","setTimeout","removeAttribute","Swal","fire","text","icon","buttonsStyling","confirmButtonText","customClass","confirmButton","result","isConfirmed","hide","showCancelButton","cancelButtonText","cancelButton","value","reset","dismiss","initForm","KTUtil","onDOMContentLoaded"],"mappings":"mBAGA,IAAIA,EAAqB,WAErB,MAAMC,EAAUC,SAASC,eAAe,yBAClCC,EAAOH,EAAQI,cAAc,+BAC7BC,EAAQ,IAAIC,UAAUC,MAAMP,GAuJlC,MAAO,CAEHQ,KAAM,YAtJK,WAGX,IAAIC,EAAYC,eAAeC,eAC3BR,EACA,CACIS,OAAQ,CACJ,OAAU,CACNC,WAAY,CACRC,SAAU,CACNC,QAAS,8BAKzBC,QAAS,CACLC,QAAS,IAAIP,eAAeM,QAAQE,QACpCZ,UAAW,IAAII,eAAeM,QAAQG,WAAW,CAC7CC,YAAa,UACbC,gBAAiB,GACjBC,cAAe,QAO/B,MAAMC,EAAevB,EAAQI,cAAc,yCAC3CmB,EAAaC,iBAAiB,SAAS,SAAUC,GAC7CA,EAAEC,iBAGEjB,GACAA,EAAUkB,WAAWC,MAAK,SAAUC,GAChCC,QAAQC,IAAI,cAEE,SAAVF,GACAN,EAAaS,aAAa,oBAAqB,MAG/CT,EAAaU,UAAW,EAExBC,YAAW,WACPX,EAAaY,gBAAgB,qBAE7BC,KAAKC,KAAK,CACNC,KAAM,4CACNC,KAAM,UACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,qBAEpBf,MAAK,SAAUgB,GACVA,EAAOC,cACPxC,EAAMyC,OAGNvB,EAAaU,UAAW,QAKjC,MAEHG,KAAKC,KAAK,CACNC,KAAM,sEACNC,KAAM,QACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,2BASlB3C,EAAQI,cAAc,yCAC9BoB,iBAAiB,SAAS,SAAUC,GAC7CA,EAAEC,iBAEFU,KAAKC,KAAK,CACNC,KAAM,yCACNC,KAAM,UACNQ,kBAAkB,EAClBP,gBAAgB,EAChBC,kBAAmB,kBACnBO,iBAAkB,aAClBN,YAAa,CACTC,cAAe,kBACfM,aAAc,0BAEnBrB,MAAK,SAAUgB,GACVA,EAAOM,OACP/C,EAAKgD,QACL9C,EAAMyC,QACoB,WAAnBF,EAAOQ,SACdhB,KAAKC,KAAK,CACNC,KAAM,qCACNC,KAAM,QACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,2BAQf3C,EAAQI,cAAc,wCAC9BoB,iBAAiB,SAAS,SAAUC,GAC5CA,EAAEC,iBAEFU,KAAKC,KAAK,CACNC,KAAM,yCACNC,KAAM,UACNQ,kBAAkB,EAClBP,gBAAgB,EAChBC,kBAAmB,kBACnBO,iBAAkB,aAClBN,YAAa,CACTC,cAAe,kBACfM,aAAc,0BAEnBrB,MAAK,SAAUgB,GACVA,EAAOM,OACP/C,EAAKgD,QACL9C,EAAMyC,QACoB,WAAnBF,EAAOQ,SACdhB,KAAKC,KAAK,CACNC,KAAM,qCACNC,KAAM,QACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,2BAW/BU,KA9Ja,GAoKzBC,OAAOC,oBAAmB,WACtBxD,EAAmBS,W","file":"js/custom/apps/user-management/users/list/export-users.js","sourcesContent":["\"use strict\";\r\n\r\n// Class definition\r\nvar KTModalExportUsers = function () {\r\n    // Shared variables\r\n    const element = document.getElementById('kt_modal_export_users');\r\n    const form = element.querySelector('#kt_modal_export_users_form');\r\n    const modal = new bootstrap.Modal(element);\r\n\r\n    // Init form inputs\r\n    var initForm = function () {\r\n\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        var validator = FormValidation.formValidation(\r\n            form,\r\n            {\r\n                fields: {\r\n                    'format': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'File format is required'\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: ''\r\n                    })\r\n                }\r\n            }\r\n        );\r\n\r\n        // Submit button handler\r\n        const submitButton = element.querySelector('[data-kt-users-modal-action=\"submit\"]');\r\n        submitButton.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    console.log('validated!');\r\n\r\n                    if (status == 'Valid') {\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable submit button whilst loading\r\n                        submitButton.disabled = true;\r\n\r\n                        setTimeout(function () {\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            Swal.fire({\r\n                                text: \"User list has been successfully exported!\",\r\n                                icon: \"success\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            }).then(function (result) {\r\n                                if (result.isConfirmed) {\r\n                                    modal.hide();\r\n\r\n                                    // Enable submit button after loading\r\n                                    submitButton.disabled = false;\r\n                                }\r\n                            });\r\n\r\n                            //form.submit(); // Submit form\r\n                        }, 2000);\r\n                    } else {\r\n                        Swal.fire({\r\n                            text: \"Sorry, looks like there are some errors detected, please try again.\",\r\n                            icon: \"error\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: \"Ok, got it!\",\r\n                            customClass: {\r\n                                confirmButton: \"btn btn-primary\"\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        // Cancel button handler\r\n        const cancelButton = element.querySelector('[data-kt-users-modal-action=\"cancel\"]');\r\n        cancelButton.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            Swal.fire({\r\n                text: \"Are you sure you would like to cancel?\",\r\n                icon: \"warning\",\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: \"Yes, cancel it!\",\r\n                cancelButtonText: \"No, return\",\r\n                customClass: {\r\n                    confirmButton: \"btn btn-primary\",\r\n                    cancelButton: \"btn btn-active-light\"\r\n                }\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    form.reset(); // Reset form\t\r\n                    modal.hide(); // Hide modal\t\t\t\t\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: \"Your form has not been cancelled!.\",\r\n                        icon: \"error\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn btn-primary\",\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        // Close button handler\r\n        const closeButton = element.querySelector('[data-kt-users-modal-action=\"close\"]');\r\n        closeButton.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            Swal.fire({\r\n                text: \"Are you sure you would like to cancel?\",\r\n                icon: \"warning\",\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: \"Yes, cancel it!\",\r\n                cancelButtonText: \"No, return\",\r\n                customClass: {\r\n                    confirmButton: \"btn btn-primary\",\r\n                    cancelButton: \"btn btn-active-light\"\r\n                }\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    form.reset(); // Reset form\t\r\n                    modal.hide(); // Hide modal\t\t\t\t\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: \"Your form has not been cancelled!.\",\r\n                        icon: \"error\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn btn-primary\",\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    return {\r\n        // Public functions\r\n        init: function () {\r\n            initForm();\r\n        }\r\n    };\r\n}();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTModalExportUsers.init();\r\n});"],"sourceRoot":""}