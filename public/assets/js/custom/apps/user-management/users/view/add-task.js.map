{"version":3,"sources":["webpack://metronic/../demo5/src/js/custom/apps/user-management/users/view/add-task.js"],"names":["KTUsersAddTask","element","document","getElementById","form","querySelector","modal","bootstrap","Modal","init","$","flatpickr","dateFormat","validator","FormValidation","formValidation","fields","validators","notEmpty","message","plugins","trigger","Trigger","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","addEventListener","e","preventDefault","Swal","fire","text","icon","showCancelButton","buttonsStyling","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","then","result","value","reset","hide","dismiss","submitButton","validate","status","console","log","setAttribute","disabled","setTimeout","removeAttribute","isConfirmed","initAddTask","querySelectorAll","forEach","el","resetButton","taskForm","on","revalidateField","KTUtil","onDOMContentLoaded"],"mappings":"mBAGA,IAAIA,EAAiB,WAEjB,MAAMC,EAAUC,SAASC,eAAe,qBAClCC,EAAOH,EAAQI,cAAc,2BAC7BC,EAAQ,IAAIC,UAAUC,MAAMP,GAgTlC,MAAO,CAEHQ,KAAM,WA/SQ,MAGdC,EAAE,iCAAiCC,UAAU,CACzCC,WAAY,UAIhB,IAAIC,EAAYC,eAAeC,eAC3BX,EACA,CACIY,OAAQ,CACJ,aAAgB,CACZC,WAAY,CACRC,SAAU,CACNC,QAAS,+BAIrB,UAAa,CACTF,WAAY,CACRC,SAAU,CACNC,QAAS,4BAMzBC,QAAS,CACLC,QAAS,IAAIP,eAAeM,QAAQE,QACpCf,UAAW,IAAIO,eAAeM,QAAQG,WAAW,CAC7CC,YAAa,UACbC,gBAAiB,GACjBC,cAAe,QAOXzB,EAAQI,cAAc,wCAC9BsB,iBAAiB,SAASC,IAClCA,EAAEC,iBAEFC,KAAKC,KAAK,CACNC,KAAM,yCACNC,KAAM,UACNC,kBAAkB,EAClBC,gBAAgB,EAChBC,kBAAmB,kBACnBC,iBAAkB,aAClBC,YAAa,CACTC,cAAe,kBACfC,aAAc,0BAEnBC,MAAK,SAAUC,GACVA,EAAOC,OACPvC,EAAKwC,QACLtC,EAAMuC,QACoB,WAAnBH,EAAOI,SACdhB,KAAKC,KAAK,CACNC,KAAM,qCACNC,KAAM,QACNE,gBAAgB,EAChBC,kBAAmB,cACnBE,YAAa,CACTC,cAAe,2BAQdtC,EAAQI,cAAc,yCAC9BsB,iBAAiB,SAASC,IACnCA,EAAEC,iBAEFC,KAAKC,KAAK,CACNC,KAAM,yCACNC,KAAM,UACNC,kBAAkB,EAClBC,gBAAgB,EAChBC,kBAAmB,kBACnBC,iBAAkB,aAClBC,YAAa,CACTC,cAAe,kBACfC,aAAc,0BAEnBC,MAAK,SAAUC,GACVA,EAAOC,OACPvC,EAAKwC,QACLtC,EAAMuC,QACoB,WAAnBH,EAAOI,SACdhB,KAAKC,KAAK,CACNC,KAAM,qCACNC,KAAM,QACNE,gBAAgB,EAChBC,kBAAmB,cACnBE,YAAa,CACTC,cAAe,2BAQnC,MAAMQ,EAAe9C,EAAQI,cAAc,yCAC3C0C,EAAapB,iBAAiB,SAAS,SAAUC,GAE7CA,EAAEC,iBAGEhB,GACAA,EAAUmC,WAAWP,MAAK,SAAUQ,GAChCC,QAAQC,IAAI,cAEE,SAAVF,GAEAF,EAAaK,aAAa,oBAAqB,MAG/CL,EAAaM,UAAW,EAGxBC,YAAW,WAEPP,EAAaQ,gBAAgB,qBAG7BR,EAAaM,UAAW,EAGxBvB,KAAKC,KAAK,CACNC,KAAM,wCACNC,KAAM,UACNE,gBAAgB,EAChBC,kBAAmB,cACnBE,YAAa,CACTC,cAAe,qBAEpBE,MAAK,SAAUC,GACVA,EAAOc,aACPlD,EAAMuC,YAKf,MAGHf,KAAKC,KAAK,CACNC,KAAM,sEACNC,KAAM,QACNE,gBAAgB,EAChBC,kBAAmB,cACnBE,YAAa,CACTC,cAAe,4BAkJnCkB,GAvIiBvD,SAASwD,iBAAiB,sCAElCC,SAAQC,IACjB,MAAMC,EAAcD,EAAGvD,cAAc,8CAC/B0C,EAAea,EAAGvD,cAAc,+CAChCyD,EAAWF,EAAGvD,cAAc,2CAGlC,IAAIQ,EAAYC,eAAeC,eAC3B+C,EACA,CACI9C,OAAQ,CACJ,YAAe,CACXC,WAAY,CACRC,SAAU,CACNC,QAAS,gCAMzBC,QAAS,CACLC,QAAS,IAAIP,eAAeM,QAAQE,QACpCf,UAAW,IAAIO,eAAeM,QAAQG,WAAW,CAC7CC,YAAa,UACbC,gBAAiB,GACjBC,cAAe,QAO/BhB,EAAEoD,EAASzD,cAAc,yBAAyB0D,GAAG,UAAU,WAE3DlD,EAAUmD,gBAAgB,kBAI9BH,EAAYlC,iBAAiB,SAASC,IAClCA,EAAEC,iBAEFC,KAAKC,KAAK,CACNC,KAAM,wCACNC,KAAM,UACNC,kBAAkB,EAClBC,gBAAgB,EAChBC,kBAAmB,iBACnBC,iBAAkB,aAClBC,YAAa,CACTC,cAAe,kBACfC,aAAc,0BAEnBC,MAAK,SAAUC,GACVA,EAAOC,OACPmB,EAASlB,QACTgB,EAAGf,QACuB,WAAnBH,EAAOI,SACdhB,KAAKC,KAAK,CACNC,KAAM,4BACNC,KAAM,QACNE,gBAAgB,EAChBC,kBAAmB,cACnBE,YAAa,CACTC,cAAe,2BAQnCQ,EAAapB,iBAAiB,SAASC,IACnCA,EAAEC,iBAGEhB,GACAA,EAAUmC,WAAWP,MAAK,SAAUQ,GAChCC,QAAQC,IAAI,cAEE,SAAVF,GAEAF,EAAaK,aAAa,oBAAqB,MAG/CL,EAAaM,UAAW,EAGxBC,YAAW,WAEPP,EAAaQ,gBAAgB,qBAG7BR,EAAaM,UAAW,EAGxBvB,KAAKC,KAAK,CACNC,KAAM,wCACNC,KAAM,UACNE,gBAAgB,EAChBC,kBAAmB,cACnBE,YAAa,CACTC,cAAe,qBAEpBE,MAAK,SAAUC,GACVA,EAAOc,aACPI,EAAGf,YAKZ,MAGHf,KAAKC,KAAK,CACNC,KAAM,sEACNC,KAAM,QACNE,gBAAgB,EAChBC,kBAAmB,cACnBE,YAAa,CACTC,cAAe,qBAEpBE,MAAK,0BA1Sf,GA8TrBwB,OAAOC,oBAAmB,WACtBlE,EAAeS,W","file":"js/custom/apps/user-management/users/view/add-task.js","sourcesContent":["\"use strict\";\r\n\r\n// Class definition\r\nvar KTUsersAddTask = function () {\r\n    // Shared variables\r\n    const element = document.getElementById('kt_modal_add_task');\r\n    const form = element.querySelector('#kt_modal_add_task_form');\r\n    const modal = new bootstrap.Modal(element);\r\n\r\n    // Init add task modal\r\n    var initAddTask = () => {\r\n\r\n        // Init flatpickr -- for more info: https://flatpickr.js.org/\r\n        $(\"#kt_modal_add_task_datepicker\").flatpickr({\r\n            dateFormat: \"Y-m-d\",\r\n        });\r\n\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        var validator = FormValidation.formValidation(\r\n            form,\r\n            {\r\n                fields: {\r\n                    'task_duedate': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Task due date is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'task_name': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Task name is required'\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: ''\r\n                    })\r\n                }\r\n            }\r\n        );\r\n\r\n        // Close button handler\r\n        const closeButton = element.querySelector('[data-kt-users-modal-action=\"close\"]');\r\n        closeButton.addEventListener('click', e => {\r\n            e.preventDefault();\r\n\r\n            Swal.fire({\r\n                text: \"Are you sure you would like to cancel?\",\r\n                icon: \"warning\",\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: \"Yes, cancel it!\",\r\n                cancelButtonText: \"No, return\",\r\n                customClass: {\r\n                    confirmButton: \"btn btn-primary\",\r\n                    cancelButton: \"btn btn-active-light\"\r\n                }\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    form.reset(); // Reset form\t\r\n                    modal.hide(); // Hide modal\t\t\t\t\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: \"Your form has not been cancelled!.\",\r\n                        icon: \"error\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn btn-primary\",\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        // Cancel button handler\r\n        const cancelButton = element.querySelector('[data-kt-users-modal-action=\"cancel\"]');\r\n        cancelButton.addEventListener('click', e => {\r\n            e.preventDefault();\r\n\r\n            Swal.fire({\r\n                text: \"Are you sure you would like to cancel?\",\r\n                icon: \"warning\",\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: \"Yes, cancel it!\",\r\n                cancelButtonText: \"No, return\",\r\n                customClass: {\r\n                    confirmButton: \"btn btn-primary\",\r\n                    cancelButton: \"btn btn-active-light\"\r\n                }\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    form.reset(); // Reset form\t\r\n                    modal.hide(); // Hide modal\t\t\t\t\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: \"Your form has not been cancelled!.\",\r\n                        icon: \"error\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn btn-primary\",\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        // Submit button handler\r\n        const submitButton = element.querySelector('[data-kt-users-modal-action=\"submit\"]');\r\n        submitButton.addEventListener('click', function (e) {\r\n            // Prevent default button action\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    console.log('validated!');\r\n\r\n                    if (status == 'Valid') {\r\n                        // Show loading indication\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable button to avoid multiple click \r\n                        submitButton.disabled = true;\r\n\r\n                        // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        setTimeout(function () {\r\n                            // Remove loading indication\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            // Enable button\r\n                            submitButton.disabled = false;\r\n\r\n                            // Show popup confirmation \r\n                            Swal.fire({\r\n                                text: \"Form has been successfully submitted!\",\r\n                                icon: \"success\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            }).then(function (result) {\r\n                                if (result.isConfirmed) {\r\n                                    modal.hide();\r\n                                }\r\n                            });\r\n\r\n                            //form.submit(); // Submit form\r\n                        }, 2000);\r\n                    } else {\r\n                        // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        Swal.fire({\r\n                            text: \"Sorry, looks like there are some errors detected, please try again.\",\r\n                            icon: \"error\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: \"Ok, got it!\",\r\n                            customClass: {\r\n                                confirmButton: \"btn btn-primary\"\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    // Init update task status\r\n    var initUpdateTaskStatus = () => {\r\n        const allTaskMenus = document.querySelectorAll('[data-kt-menu-id=\"kt-users-tasks\"]');\r\n\r\n        allTaskMenus.forEach(el => {\r\n            const resetButton = el.querySelector('[data-kt-users-update-task-status=\"reset\"]');\r\n            const submitButton = el.querySelector('[data-kt-users-update-task-status=\"submit\"]');\r\n            const taskForm = el.querySelector('[data-kt-menu-id=\"kt-users-tasks-form\"]');\r\n\r\n            // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n            var validator = FormValidation.formValidation(\r\n                taskForm,\r\n                {\r\n                    fields: {\r\n                        'task_status': {\r\n                            validators: {\r\n                                notEmpty: {\r\n                                    message: 'Task due date is required'\r\n                                }\r\n                            }\r\n                        },\r\n                    },\r\n\r\n                    plugins: {\r\n                        trigger: new FormValidation.plugins.Trigger(),\r\n                        bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                            rowSelector: '.fv-row',\r\n                            eleInvalidClass: '',\r\n                            eleValidClass: ''\r\n                        })\r\n                    }\r\n                }\r\n            );\r\n\r\n            // Revalidate country field. For more info, plase visit the official plugin site: https://select2.org/\r\n            $(taskForm.querySelector('[name=\"task_status\"]')).on('change', function () {\r\n                // Revalidate the field when an option is chosen\r\n                validator.revalidateField('task_status');\r\n            });\r\n\r\n            // Reset action handler\r\n            resetButton.addEventListener('click', e => {\r\n                e.preventDefault();\r\n\r\n                Swal.fire({\r\n                    text: \"Are you sure you would like to reset?\",\r\n                    icon: \"warning\",\r\n                    showCancelButton: true,\r\n                    buttonsStyling: false,\r\n                    confirmButtonText: \"Yes, reset it!\",\r\n                    cancelButtonText: \"No, return\",\r\n                    customClass: {\r\n                        confirmButton: \"btn btn-primary\",\r\n                        cancelButton: \"btn btn-active-light\"\r\n                    }\r\n                }).then(function (result) {\r\n                    if (result.value) {\r\n                        taskForm.reset(); // Reset form\t\t\r\n                        el.hide();\r\n                    } else if (result.dismiss === 'cancel') {\r\n                        Swal.fire({\r\n                            text: \"Your form was not reset!.\",\r\n                            icon: \"error\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: \"Ok, got it!\",\r\n                            customClass: {\r\n                                confirmButton: \"btn btn-primary\",\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n\r\n            // Submit action handler\r\n            submitButton.addEventListener('click', e => {\r\n                e.preventDefault();\r\n\r\n                // Validate form before submit\r\n                if (validator) {\r\n                    validator.validate().then(function (status) {\r\n                        console.log('validated!');\r\n\r\n                        if (status == 'Valid') {\r\n                            // Show loading indication\r\n                            submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                            // Disable button to avoid multiple click \r\n                            submitButton.disabled = true;\r\n\r\n                            // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                            setTimeout(function () {\r\n                                // Remove loading indication\r\n                                submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                                // Enable button\r\n                                submitButton.disabled = false;\r\n\r\n                                // Show popup confirmation \r\n                                Swal.fire({\r\n                                    text: \"Form has been successfully submitted!\",\r\n                                    icon: \"success\",\r\n                                    buttonsStyling: false,\r\n                                    confirmButtonText: \"Ok, got it!\",\r\n                                    customClass: {\r\n                                        confirmButton: \"btn btn-primary\"\r\n                                    }\r\n                                }).then(function (result) {\r\n                                    if (result.isConfirmed) {\r\n                                        el.hide();\r\n                                    }\r\n                                });\r\n\r\n                                //taskForm.submit(); // Submit form\r\n                            }, 2000);\r\n                        } else {\r\n                            // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                            Swal.fire({\r\n                                text: \"Sorry, looks like there are some errors detected, please try again.\",\r\n                                icon: \"error\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            }).then(function(){\r\n                                //el.show();\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    return {\r\n        // Public functions\r\n        init: function () {\r\n            initAddTask();\r\n            initUpdateTaskStatus();\r\n        }\r\n    };\r\n}();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTUsersAddTask.init();\r\n});"],"sourceRoot":""}