{"version":3,"sources":["webpack://metronic/../demo5/src/js/custom/documentation/forms/formvalidation/advanced.js"],"names":["KTFormValidationDemoAdvanced","init","form","document","getElementById","$","daterangepicker","validator","FormValidation","formValidation","fields","validators","notEmpty","message","plugins","trigger","Trigger","bootstrap","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","submitButton","addEventListener","e","preventDefault","validate","then","status","console","log","setAttribute","disabled","setTimeout","removeAttribute","Swal","fire","text","icon","buttonsStyling","confirmButtonText","customClass","confirmButton","exampleDateRangePicker","flatpickr","date","format","exampleFlatpickr","file","extension","type","exampleImageInput","callback","input","value","length","validatePassword","identical","compare","querySelector","examplePassword","on","revalidateField","exampleSelect2","Tagify","whitelist","maxTags","dropdown","maxItems","classname","enabled","closeOnSelect","exampleTagify","KTUtil","onDOMContentLoaded"],"mappings":"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","file":"js/custom/documentation/forms/formvalidation/advanced.js","sourcesContent":["\"use strict\";\r\n\r\n// Class definition\r\nvar KTFormValidationDemoAdvanced = function () {\r\n\r\n    // Private functions\r\n    var exampleAdvanced = function () {\r\n        // Define form element\r\n        const form = document.getElementById('kt_docs_formvalidation_advanced');\r\n\r\n        // Init daterangepicker --- for more info, please visit: https://www.daterangepicker.com/\r\n        $(\"#kt_daterangepicker\").daterangepicker();\r\n\r\n        // Init flatpickr --- for more info, please visit: https://flatpickr.js.org/\r\n        $(\"#kt_flatpickr\").flatpickr();\r\n\r\n        // Init tagify --- for more info, please visit: https://yaireo.github.io/tagify/\r\n        new Tagify(document.querySelector(\"#kt_tagify\"), {\r\n            whitelist: [\"Tag 1\", \"Tag 2\", \"Tag 3\", \"Tag 4\", \"Tag 5\", \"Tag 6\", \"Tag 7\", \"Tag 8\", \"Tag 9\", \"Tag 10\", \"Tag 11\", \"Tag 12\"],\r\n            maxTags: 6,\r\n            dropdown: {\r\n                maxItems: 20,           // <- mixumum allowed rendered suggestions\r\n                classname: \"tagify__inline__suggestions\", // <- custom classname for this dropdown, so it could be targeted\r\n                enabled: 0,             // <- show suggestions on focus\r\n                closeOnSelect: false    // <- do not hide the suggestions dropdown once an item has been selected\r\n            }\r\n        });\r\n\r\n\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        var validator = FormValidation.formValidation(\r\n            form,\r\n            {\r\n                fields: {\r\n                    'daterangepicker_input': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Date range input is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'flatpickr_input': {\r\n                        validators: {\r\n                            date: {\r\n                                format: 'YYYY-MM-DD',\r\n                                message: 'The value is not a valid date',\r\n                            },\r\n                            notEmpty: {\r\n                                message: 'Flatpickr input is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'avatar': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Please select an image'\r\n                            },\r\n                            file: {\r\n                                extension: 'jpg,jpeg,png',\r\n                                type: 'image/jpeg,image/png',\r\n                                message: 'The selected file is not valid'\r\n                            },\r\n                        }\r\n                    },\r\n                    'select2_input': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Select2 input is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'tagify_input': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Tagify input is required'\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: ''\r\n                    })\r\n                }\r\n            }\r\n        );\r\n\r\n        // Revalidate Select2 input. For more info, plase visit the official plugin site: https://select2.org/\r\n        $(form.querySelector('[name=\"select2_input\"]')).on('change', function () {\r\n            // Revalidate the field when an option is chosen\r\n            validator.revalidateField('select2_input');\r\n        });\r\n\r\n        // Submit button handler\r\n        const submitButton = document.getElementById('kt_docs_formvalidation_submit');\r\n        submitButton.addEventListener('click', function (e) {\r\n            // Prevent default button action\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    console.log('validated!');\r\n\r\n                    if (status == 'Valid') {\r\n                        // Show loading indication\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable button to avoid multiple click \r\n                        submitButton.disabled = true;\r\n\r\n                        // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        setTimeout(function () {\r\n                            // Remove loading indication\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            // Enable button\r\n                            submitButton.disabled = false;\r\n\r\n                            // Show popup confirmation \r\n                            Swal.fire({\r\n                                text: \"Form has been successfully submitted!\",\r\n                                icon: \"success\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            });\r\n\r\n                            //form.submit(); // Submit form\r\n                        }, 2000);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    var exampleDateRangePicker = function () {\r\n        // Define form element\r\n        const form = document.getElementById('kt_docs_formvalidation_daterangepicker');\r\n\r\n        // Init daterangepicker --- for more info, please visit: https://www.daterangepicker.com/\r\n        $(\"#kt_daterangepicker\").daterangepicker();\r\n\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        var validator = FormValidation.formValidation(\r\n            form,\r\n            {\r\n                fields: {\r\n                    'daterangepicker_input': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Date range input is required'\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: ''\r\n                    })\r\n                }\r\n            }\r\n        );\r\n\r\n        // Submit button handler\r\n        const submitButton = document.getElementById('kt_docs_formvalidation_daterangepicker_submit');\r\n        submitButton.addEventListener('click', function (e) {\r\n            // Prevent default button action\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    console.log('validated!');\r\n\r\n                    if (status == 'Valid') {\r\n                        // Show loading indication\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable button to avoid multiple click \r\n                        submitButton.disabled = true;\r\n\r\n                        // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        setTimeout(function () {\r\n                            // Remove loading indication\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            // Enable button\r\n                            submitButton.disabled = false;\r\n\r\n                            // Show popup confirmation \r\n                            Swal.fire({\r\n                                text: \"Form has been successfully submitted!\",\r\n                                icon: \"success\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            });\r\n\r\n                            //form.submit(); // Submit form\r\n                        }, 2000);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    var exampleFlatpickr = function () {\r\n        // Define form element\r\n        const form = document.getElementById('kt_docs_formvalidation_flatpickr');\r\n\r\n        // Init flatpickr --- for more info, please visit: https://flatpickr.js.org/\r\n        $(\"#kt_flatpickr\").flatpickr();\r\n\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        var validator = FormValidation.formValidation(\r\n            form,\r\n            {\r\n                fields: {\r\n                    'flatpickr_input': {\r\n                        validators: {\r\n                            date: {\r\n                                format: 'YYYY-MM-DD',\r\n                                message: 'The value is not a valid date',\r\n                            },\r\n                            notEmpty: {\r\n                                message: 'Flatpickr input is required'\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: ''\r\n                    })\r\n                }\r\n            }\r\n        );\r\n\r\n        // Submit button handler\r\n        const submitButton = document.getElementById('kt_docs_formvalidation_flatpickr_submit');\r\n        submitButton.addEventListener('click', function (e) {\r\n            // Prevent default button action\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    console.log('validated!');\r\n\r\n                    if (status == 'Valid') {\r\n                        // Show loading indication\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable button to avoid multiple click \r\n                        submitButton.disabled = true;\r\n\r\n                        // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        setTimeout(function () {\r\n                            // Remove loading indication\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            // Enable button\r\n                            submitButton.disabled = false;\r\n\r\n                            // Show popup confirmation \r\n                            Swal.fire({\r\n                                text: \"Form has been successfully submitted!\",\r\n                                icon: \"success\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            });\r\n\r\n                            //form.submit(); // Submit form\r\n                        }, 2000);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    var exampleImageInput = function () {\r\n        // Define form element\r\n        const form = document.getElementById('kt_docs_formvalidation_image_input');\r\n\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        var validator = FormValidation.formValidation(\r\n            form,\r\n            {\r\n                fields: {\r\n                    'avatar': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Please select an image'\r\n                            },\r\n                            file: {\r\n                                extension: 'jpg,jpeg,png',\r\n                                type: 'image/jpeg,image/png',\r\n                                message: 'The selected file is not valid'\r\n                            },\r\n                        }\r\n                    },\r\n                },\r\n\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: ''\r\n                    })\r\n                }\r\n            }\r\n        );\r\n\r\n        // Submit button handler\r\n        const submitButton = document.getElementById('kt_docs_formvalidation_image_input_submit');\r\n        submitButton.addEventListener('click', function (e) {\r\n            // Prevent default button action\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    console.log('validated!');\r\n\r\n                    if (status == 'Valid') {\r\n                        // Show loading indication\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable button to avoid multiple click \r\n                        submitButton.disabled = true;\r\n\r\n                        // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        setTimeout(function () {\r\n                            // Remove loading indication\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            // Enable button\r\n                            submitButton.disabled = false;\r\n\r\n                            // Show popup confirmation \r\n                            Swal.fire({\r\n                                text: \"Form has been successfully submitted!\",\r\n                                icon: \"success\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            });\r\n\r\n                            //form.submit(); // Submit form\r\n                        }, 2000);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    var examplePassword = function () {\r\n        // Define form element\r\n        const form = document.getElementById('kt_docs_formvalidation_password');\r\n\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        var validator = FormValidation.formValidation(\r\n            form,\r\n            {\r\n                fields: {\r\n                    'current_password': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Current password is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'new_password': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'The password is required'\r\n                            },\r\n                            callback: {\r\n                                message: 'Please enter valid password',\r\n                                callback: function (input) {\r\n                                    if (input.value.length > 0) {\r\n                                        return validatePassword();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    'confirm_password': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'The password confirmation is required'\r\n                            },\r\n                            identical: {\r\n                                compare: function () {\r\n                                    return form.querySelector('[name=\"new_password\"]').value;\r\n                                },\r\n                                message: 'The password and its confirm are not the same'\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: ''\r\n                    })\r\n                }\r\n            }\r\n        );\r\n\r\n        // Submit button handler\r\n        const submitButton = document.getElementById('kt_docs_formvalidation_password_submit');\r\n        submitButton.addEventListener('click', function (e) {\r\n            // Prevent default button action\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    console.log('validated!');\r\n\r\n                    if (status == 'Valid') {\r\n                        // Show loading indication\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable button to avoid multiple click \r\n                        submitButton.disabled = true;\r\n\r\n                        // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        setTimeout(function () {\r\n                            // Remove loading indication\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            // Enable button\r\n                            submitButton.disabled = false;\r\n\r\n                            // Show popup confirmation \r\n                            Swal.fire({\r\n                                text: \"Form has been successfully submitted!\",\r\n                                icon: \"success\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            });\r\n\r\n                            //form.submit(); // Submit form\r\n                        }, 2000);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    var exampleSelect2 = function () {\r\n        // Define form element\r\n        const form = document.getElementById('kt_docs_formvalidation_select2');\r\n\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        var validator = FormValidation.formValidation(\r\n            form,\r\n            {\r\n                fields: {\r\n                    'select2_input': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Select2 input is required'\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: ''\r\n                    })\r\n                }\r\n            }\r\n        );\r\n\r\n        // Revalidate Select2 input. For more info, plase visit the official plugin site: https://select2.org/\r\n        $(form.querySelector('[name=\"select2_input\"]')).on('change', function () {\r\n            // Revalidate the field when an option is chosen\r\n            validator.revalidateField('select2_input');\r\n        });\r\n\r\n        // Submit button handler\r\n        const submitButton = document.getElementById('kt_docs_formvalidation_select2_submit');\r\n        submitButton.addEventListener('click', function (e) {\r\n            // Prevent default button action\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    console.log('validated!');\r\n\r\n                    if (status == 'Valid') {\r\n                        // Show loading indication\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable button to avoid multiple click \r\n                        submitButton.disabled = true;\r\n\r\n                        // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        setTimeout(function () {\r\n                            // Remove loading indication\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            // Enable button\r\n                            submitButton.disabled = false;\r\n\r\n                            // Show popup confirmation \r\n                            Swal.fire({\r\n                                text: \"Form has been successfully submitted!\",\r\n                                icon: \"success\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            });\r\n\r\n                            //form.submit(); // Submit form\r\n                        }, 2000);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    var exampleTagify = function () {\r\n        // Define form element\r\n        const form = document.getElementById('kt_docs_formvalidation_tagify');\r\n\r\n        // Init tagify --- for more info, please visit: https://yaireo.github.io/tagify/\r\n        new Tagify(document.querySelector(\"#kt_tagify\"), {\r\n            whitelist: [\"Tag 1\", \"Tag 2\", \"Tag 3\", \"Tag 4\", \"Tag 5\", \"Tag 6\", \"Tag 7\", \"Tag 8\", \"Tag 9\", \"Tag 10\", \"Tag 11\", \"Tag 12\"],\r\n            maxTags: 6,\r\n            dropdown: {\r\n                maxItems: 20,           // <- mixumum allowed rendered suggestions\r\n                classname: \"tagify__inline__suggestions\", // <- custom classname for this dropdown, so it could be targeted\r\n                enabled: 0,             // <- show suggestions on focus\r\n                closeOnSelect: false    // <- do not hide the suggestions dropdown once an item has been selected\r\n            }\r\n        });\r\n\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        var validator = FormValidation.formValidation(\r\n            form,\r\n            {\r\n                fields: {\r\n                    'tagify_input': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Tagify input is required'\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: ''\r\n                    })\r\n                }\r\n            }\r\n        );\r\n\r\n        // Submit button handler\r\n        const submitButton = document.getElementById('kt_docs_formvalidation_tagify_submit');\r\n        submitButton.addEventListener('click', function (e) {\r\n            // Prevent default button action\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    console.log('validated!');\r\n\r\n                    if (status == 'Valid') {\r\n                        // Show loading indication\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable button to avoid multiple click \r\n                        submitButton.disabled = true;\r\n\r\n                        // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        setTimeout(function () {\r\n                            // Remove loading indication\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            // Enable button\r\n                            submitButton.disabled = false;\r\n\r\n                            // Show popup confirmation \r\n                            Swal.fire({\r\n                                text: \"Form has been successfully submitted!\",\r\n                                icon: \"success\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            });\r\n\r\n                            //form.submit(); // Submit form\r\n                        }, 2000);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    return {\r\n        // Public Functions\r\n        init: function () {\r\n            exampleDateRangePicker();\r\n            exampleFlatpickr();\r\n            exampleImageInput();\r\n            examplePassword();\r\n            exampleSelect2();\r\n            exampleTagify();\r\n        }\r\n    };\r\n}();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTFormValidationDemoAdvanced.init();\r\n});\r\n"],"sourceRoot":""}